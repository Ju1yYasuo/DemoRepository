input {
	# 多张表的同步只需要设置多个jdbc的模块就行了,路径配置建议都使用绝对路径，防止启动命令路径混淆
	#注意=> 语法后面有空格
	jdbc {
		#jdbc模块名称
		type => "products"
		# mysql 数据库链接,shop为数据库名
		jdbc_connection_string => "jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=UTF-8&serverTimezone=GMT%2B8&useSSL=false"
		# 用户名和密码
		jdbc_user => "root"
		jdbc_password => "julyyasuo"

		# 驱动
		jdbc_driver_library => "J:/tools/logstash-7.17.3/mysql/mysql-connector-java-8.0.11.jar"
		# 驱动类名
		jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
		# 是否分页
		jdbc_paging_enabled => "true"
		jdbc_page_size => "100"
		#新版本无效
		#jdbc_default_timezone => "Asia/Shanghai"

		# 直接执行sql语句 '> :sql_last_value'增量同步
		#statement => "select * from bi_products where id > :sql_last_value"
		# 执行的sql 文件路径+名称，只能二选一
		statement_filepath => "J:/tools/logstash-7.17.3/mysql/products/sql.sql"
		
		# 启用追踪，如果为 true ,则需要指定 tracking_column
		use_column_value => true
		# 指定递增字段
		tracking_column => "id"
		#tracking_column => "create_time"
		# 递增字段类型，目前只有数字（numeric）和时间类型（timestamp），默认是数字类型
		#tracking_column_type => "timestamp"
		# 记录上次执行字段值路径
        last_run_metadata_path => "J:/tools/logstash-7.17.3/mysql/products/last_id"
		# 如果为true，每次会记录所更新的字段的值,并保存到 last_run_metadata_path 指定的文件中
        record_last_run => true
		# 是否清除 last_run_metadata_path 的记录，true则每次都从头开始查询所有的数据库记录
        clean_run => false
		
		# 是否将字段名称转小写。默认是true。Elasticsearch是区分大小写的
        #lowercase_column_names => false
		# 设置监听间隔  各字段含义（由左至右）分、时、天、月、年，全部为*默认含义为每分钟都更新
		schedule => "* * * * *"
	}
}

# 过滤、格式化数据
filter{
    mutate  {
        remove_field => ["@timestamp","@version"]
    }
	
	ruby {
		code => "event.set('create_time', event.get('create_time').time.localtime + 8*60*60)" 
	}
}

#输出
output {
	if [type] == "products" {
		elasticsearch {
			#es的ip和端口
			hosts => ["localhost:9200"]
			user => "elastic"
			password => "julyyasuo"
			#ES索引名称
			index => "products3"
			#文档类型,es7版本废弃type，这里默认_doc
			#document_type => "_doc"
			#设置数据的id为数据库中的字段
			document_id => "%{id}"
		}
		stdout {
			codec => json_lines
		}
	}
}
